import com.Protocol;
import com.*;
import mt.data.GetText;
import Data;

class Lang {
	public static var LANG = "??";
	public static var t : GetText;

	public static function init() {
		//if( t != null && LANG == mt.device.User.getLang() )
			//return;
		var oldLang = LANG;

		LANG = mt.device.User.getLang();

		#if( mBase && debug )
		LANG = "fr";
		#end

		if( LANG==null )
			LANG = "en";

		#if !connected
			#if trailer
			LANG = "en";
			#else
			LANG = "fr";
			#end
		#end

		if( Main.ME!=null && Main.ME.settings!=null && Main.ME.settings.forcedLang!=null )
			LANG = Main.ME.settings.forcedLang;

		#if parseGetText
		GetText.parse("src", "lang/catalog.pot", "lang/en.po");
		#end

		if( oldLang!=LANG )
			setLang(LANG);
	}

	public static function setLang(id:String) {
		LANG = id;
		t = new GetText();
		var data = haxe.Resource.getBytes(LANG);
		if( data==null )
			data = haxe.Resource.getBytes("en");
		t.readMo(data);
	}

	public static inline function addNbsps<T:String>(str:T):T return mt.Utf8.addNbsps(str);
	public static inline function untranslated(v:Dynamic) : LocaleString return t.untranslated(v);

	public static function fixMissingFontChars<T:String>(str:T) : T {
		str = cast StringTools.replace(str, "%", mt.Utf8.NBSP+Lang.t._("percent"));
		return str;
	}


	public static function getItem(i:Item) : { name:LocaleString, role:LocaleString} {
		var inf = switch( i ) {
			case I_Cold	: {
				name: t._("Artic cooler"),
				role: t._("Adds COLD to a bedroom.||Keep this description short! :)"),
			}
			case I_Heat : {
				name: t._("Super heating"),
				role: t._("Adds HEAT to a bedroom.||Keep this description short! :)"),
			}

			case I_Odor : {
				name: t._("French cheeses"),
				role: t._("Adds ODOR to a bedroom.||Keep this description short! :)"),
			}
			case I_Noise : {
				name: t._("Insane HiFi system"),
				role: t._("Adds NOISE to a bedroom.||Keep this description short! :)"),
			}

			case I_Light : {
				name: t._("Light bubble"),
				role: t._("Adds SUNLIGHT to a bedroom. ||Keep this description short! :)"),
			}

			case I_Color(id) : {
				name: t._("Paint"),
				role: cast "N/A",
			}

			case I_Texture(f) : {
				name: t._("Wallpaper"),
				role: cast "N/A",
			}

			case I_Bed(f) : { name: t._("Bed"), role: cast "N/A" }
			case I_Bath(f) : { name: t._("Bath"), role: cast "N/A" }
			case I_Ceil(f) : { name: t._("Ceiling pendant"), role: cast "N/A" }
			case I_Furn(f) : { name: t._("Furniture item"), role: cast "N/A" }
			case I_Wall(f) : { name: t._("Wall item"), role: cast "N/A" }

			case I_LunchBoxAll, I_LunchBoxCusto : { name: t._("Mysterious Box"), role: cast "N/A" }

			case I_Gem :
				{ name: t._("Gem"), role: cast "N/A" }

			case I_EventGift(_) :
				{ name: t._("A special event gift"), role: Lang.untranslated("N/A") }

			case I_Money(_) :
				return { name:cast "#"+i, role:cast "N/A" };
		}
		inf.role = addNbsps(inf.role);
		return inf;
	}

	public static function getAffect(a:Affect) : LocaleString {
		return switch( a ) {
			case Heat : t._("Heat");
			case Cold : t._("Cold");
			case Noise : t._("Noise");
			case Odor : t._("Odor");
			case SunLight : t._("Window");
		}
	}

	public static function getClient(c:ClientType, shotel:Null<SHotel>) : {name:LocaleString, desc:LocaleString} {
		var htrigger = shotel==null ? 0 : GameData.getHappinessTrigger(c, shotel);
		var max = shotel==null ? 0 : shotel.getMaxHappiness();
		var inf = switch( c ) {
			case C_Liker : { name:t._("Poring"), desc:t._("He is easy to satisfy but he doesn't pay that much.") }
			case C_Neighbour : { name:t._("Nice neighbour"), desc:t._("He gives +::n:: happiness to all its neighbours.", {n:GameData.NEIGHBOUR_POWER}) }
			case C_Disliker : { name:t._("Angry pear"), desc:t._("If she has something she dislikes near her, she EXPLODES!") }
			case C_Bomb : { name:t._("Bomber"), desc:t._("He EXPLODES if its happiness is 0 or less, or above ::max::. He drops extra money if he checkouts with a happiness of EXACTLY ::max::.", {max:htrigger}) }
			case C_MobSpawner : { name:t._("Mama Blob"), desc:t._("Mama blob has a VERY short stay duration. Another client (a Blobling), immediatly arrives in the queue if her happiness reaches ::n:: or more.", {n:htrigger}) }
			case C_Spawnling : { name:t._("Blobling"), desc:t._("He was generated by a Mama Blob. He has a very short stay duration and drops a gift if its happiness reaches ::n:: or more!", {n:htrigger}) }
			case C_HappyLine : { name:t._("Floor ghost"), desc:t._("+::n:: happiness to every clients on the same floor. Note: this kind of bonus cannot be applied more than ::max:: times.", {n:GameData.LINE_POWER, max:GameData.ZONE_EFFECT_LIMIT}) }
			case C_HappyColumn : { name:t._("Column ghost"), desc:t._("+::n:: happiness to every clients in the same column. Note: this kind of bonus cannot be applied more than ::max:: times.", {n:GameData.COL_POWER, max:GameData.ZONE_EFFECT_LIMIT}) }
			case C_Gifter : { name:t._("Schrodingcat"), desc:t._("Gives you a present if its happiness reach ::n:: or more!", {n:htrigger}) }
			case C_Plant : { name:t._("Leek"), desc:t._("The effect generated by this client on nearby rooms is TWICE as powerful.") }
			case C_Repairer : { name:t._("Repair"), desc:t._("He repairs all of the rooms in your hotel as soon as he checks in. He gets +1 happiness for each room repaired this way.") }
			case C_Vampire : { name:t._("Vampire"), desc:t._("He hates sunlight, so avoid bedrooms with windows. He will drop an item if he checkouts with a happiness of ::n:: or more!", {n:htrigger}) }
			case C_Gem : { name:t._("Gem chicken"), desc:t._("Gives 1 gem if its happiness reach ::n:: or more!", {n:htrigger}) }
			case C_Rich : { name:t._("Monop'guy"), desc:t._("He drops a lot of money if its happiness reach ::n:: or more!", {n:htrigger}) }
			case C_Inspector : { name:t._("Inspector"), desc:t._("He gives your hotel a new STAR and unlocks new content if its happiness reaches ::n::!", {n:max}) }
			case C_JoyBomb : { name:t._("Cuddle Bomb"), desc:t._("He gives +1 happiness to every other clients if its Happiness reaches ::n:: or more!", {n:htrigger}) }
			case C_Dragon: { name:t._("Dragon"), desc:t._("He always have lots of SAVINGS.") }
			case C_Emitter : { name:t._("Diffuser"), desc:t._("He will generate something around ONLY if you use an item on him.") }
			case C_MoneyGiver: { name:t._("Magic patron"), desc:t._("He will distribute ::n:: SAVINGS to other clients when installed in a bedroom.", {n:3}) }
			case C_Halloween: { name:t._("TODO"), desc:t._("TODO") }
			case C_Christmas: { name:t._("Evil Santa"), desc:t._("He only visits your hotel a few days before Christmas! Make him happy and he will drop exclusive Christmas rewards!!") }
			case C_Custom : { name:cast Std.string(c), desc:cast "???" }
		}
		inf.desc = addNbsps(inf.desc);
		return inf;
	}

	public static function getPerk(p:Data.ClientPerkKind) : LocaleString {
		return addNbsps( switch( p ) {
			case Data.ClientPerkKind.Cannibal : t._("SERIAL KILLER - Will eat a neighbour from time to time...");
			case Data.ClientPerkKind.PoringCannibal : t._("PORING EATER - He will eat a PORING neighbour from time to time... He gains happiness when he does that.");
			case Data.ClientPerkKind.Squatter : t._("SQUATTER - Will stay in your hotel for quite a long time!");
			case Data.ClientPerkKind.Fast : t._("FAST - He will stay for a very short time so you'll have to be quick!");
			case Data.ClientPerkKind.Vip : t._("VIP - Drops cool stuff if totally satisfied!");
			case Data.ClientPerkKind.Annoying : t._("ANNOYING - Everyone in the hotel gets ::n:: happiness!", {n:-GameData.ANNOYING_POWER});
			case Data.ClientPerkKind.Generous : t._("GENEROUS - Everyone in the hotel gets +1 SAVING when this client is installed!");
			case Data.ClientPerkKind.RandomExplosions: t._("PYROMANIAC - Will damage some bedrooms when installed.");
			case Data.ClientPerkKind.FloorExplosion : t._("EXPLOSIVE - Will damage all bedrooms on the same floor.");
			case Data.ClientPerkKind.GlobalExplosions : t._("NUCLEAR WARHEAD - Will damage every bedrooms in your hotel, except his own room.");
			case Data.ClientPerkKind.BeerMaster : t._("SODA MASTER - Will boost a Soda storage when installed.");
			case Data.ClientPerkKind.PaperMaster : t._("MISTER POOP - Will boost a Toilet Paper storage when installed.");
			case Data.ClientPerkKind.LaundryMaster : t._("LAUNDRY NINJA - Will boost a laundry when installed.");
			case Data.ClientPerkKind.Sociable : t._("SOCIABLE - Gets +::n:: happiness when another client is installed.", {n:GameData.SOCIABLE_POWER});
			case Data.ClientPerkKind.StockThief : t._("STOCK THIEF - Empty all the hotel stocks when installed.");
			case Data.ClientPerkKind.Alcoholic : t._("SUGAR ADDICT - Drinks all the Soda storage when installed (and gets very happy for that).");
			case Data.ClientPerkKind.Generator : t._("ELECTRICIAN - Refills all your Turbo boosters.");
			case Data.ClientPerkKind.PaperThief : t._("DIFFICULT DIGESTION - Empty all your Toilet Paper stocks and damages your paper storage.");
			case Data.ClientPerkKind.Dirty : t._("DIRTY - He will get a happiness bonus if its room is dirty, or a huge penalty otherwise.");
			case Data.ClientPerkKind.Thief : t._("THIEF - Steals savings from all other clients.");
			case Data.ClientPerkKind.RobinHood : t._("ROBIN HOOD - Converts ALL other client savings into money for you.");
			case Data.ClientPerkKind.Depressive : t._("DEPRESSIVE - Has a very low happiness.");
			case Data.ClientPerkKind.DoubleReward : t._("RICH UNCLE - He pays twice if he is totally satisfied!");
			case Data.ClientPerkKind.GoldExplosion : t._("ARCHITECT FAN - He drops money in all your hotel bedrooms.");
			case Data.ClientPerkKind.Aesthete : t._("AESTHETE - He gets much more happiness from a decorated bedroom.");
			case Data.ClientPerkKind.DecoHater : t._("DECORATION HATER - He gets a penalty for each decoration element in its room.");
			case Data.ClientPerkKind.SuperBooster : t._("SUPER CHARGE - He will boost every rooms when installed. Yes. Every. Single. Rooms.");
			case Data.ClientPerkKind.CaveMan : t._("MOLE - He will get a happiness bonus if its room is underground, or a huge penalty otherwise.");
			case Data.ClientPerkKind.AntiSocial : t._("ANTISOCIAL - He gets a penalty each time you install another client in your hotel!");
			case Data.ClientPerkKind.HighestRoom : t._("TO THE TOP - He will get a happiness bonus if its room is the highest one in your hotel, or a huge penalty otherwise.");
			case Data.ClientPerkKind.DecoDropper : t._("DECORATOR - He will drop 2 decoration items if satisfied!");
			case Data.ClientPerkKind.IMPOSSIBLE : Lang.untranslated("IMPOSSIBLE - You shall not pass!");
		} );
	}


	public static function getHappinessModifier(hm:HappinessMod) : LocaleString {
		return switch( hm ) {
			case HM_DirtyRoom : t._("Dirty room");
			case HM_Moved : cast "???";
			case HM_Row : getClient(C_HappyLine, null).name;
			case HM_Column : getClient(C_HappyColumn, null).name;
			case HM_JoyBomb : getClient(C_JoyBomb, null).name;
			case HM_PresenceOfLike(a), HM_PresenceOfDislike(a) : getAffect(a);
			case HM_AbsenceOfLike(a), HM_AbsenceOfDislike(a) : t._("No ::effect::", {effect:getAffect(a)});
			case HM_AbsenceOfSunlight : t._("No window");
			case HM_Present(i) : getItem(i).name;
			case HM_Luxury : t._("Luxury");
			case HM_Love: t._("Love");
			case HM_LikerBase : t._("Always happy");
			case HM_HotelServices : t._("Hotel services");
			case HM_Vip: t._("Very demanding VIP");
			case HM_Gem: t._("Gem bonus");
			case HM_Customization: t._("Decorations");
			case HM_Isolation: t._("Isolation || As in 'being alone'");
			case HM_Underground: t._("Underground");
			case HM_Altitude: t._("Altitude");
			case HM_NiceNeighbour: t._("Nice neighbour");
			case HM_Cannibalism: t._("Serial killer");
			case HM_Annoying: t._("Annoying VIP");
			case HM_Sociable: t._("Sociable");
			case HM_Antisocial: t._("Antisocial");
			case HM_StockThief: t._("Stock thief");
			case HM_Alcoholic: t._("Alcoholic");
			case HM_PerkSpecialRequest: t._("Special request");
			case HM_Unhappy: t._("Pain in the neck");
			case HM_MissingStock(rt) :
				switch( rt ) {
					case R_StockPaper : t._("Missing toilet paper");
					case R_StockSoap: t._("Missing soap");
					case R_StockBeer: t._("Missing soda");
					default : cast "???";
				}
		}
	}

	public static function getRoom(r:RoomType) : { name:LocaleString, role:LocaleString } {
		var inf = switch( r ) {
			case R_Bedroom : {
				name: t._("Bedroom"),
				role: t._("Hosts a client. ||Keep this description short! :)"),
			}
			case R_Laundry : {
				name: t._("Laundry"),
				role: t._("Generates GOLD by washing client clothes. ||Keep this description short! :)"),
			}
			case R_ClientRecycler : {
				name: t._("Client blender"),
				role: t._("Turns a client into an ITEM (the result depends on the effect generated by this client)."),
			}
			case R_Trash: {
				name: t._("Client trash"),
				role: t._("Destroys a client, you get a fraction of its money. ||Keep this description short! :)"),
			}
			case R_Bar: {
				name: t._("Bar"),
				role: t._("Turns client savings into +::n:: HAPPINESS. You can build multiple bars to increase this value.||Keep this description short! :)", {n:GameData.BAR_POWER}),
			}
			//case R_UndefinedStock: {
				//name: t._("Storage"),
				//role: t._("This room can be filled with useful resources. ||Keep this description short! :)"),
				//ambiant: t._("This storage room regenerates its own content automatically (you can use a GEM to boost that).")
			//}
			case R_StockBeer : {
				name: t._("Soda storage"),
				role: t._("Store and produce SODA. ||Keep this description short! :)"),
			}
			case R_StockPaper : {
				name: t._("Toilet paper storage"),
				role: t._("Store and produce TOILET PAPER. ||Keep this description short! :)"),
			}
			case R_StockSoap : {
				name: t._("Soap storage"),
				role: t._("Store and produce SOAP. ||Keep this description short! :)"),
			}

			case R_StockBoost : {
				name: t._("Turbo booster 2000"),
				role: t._("Provides power boosts to other rooms. ||Keep this description short! :)"),
			}

			case R_Library : {
				name: t._("Quest office"),
				role: t._("Unlocks contracts. You can build multiple Quest Offices to get more contracts!"),
			}

			case R_LevelUp : {
				name: t._("Consortium office"),
				role: Lang.untranslated("TODO"),
			}

			case R_FillerStructs : {
				name: Lang.t._("Structures"),
				role: Lang.t._("These structures allow you to build rooms isolated from your main building."),
			}

			case R_CustoRecycler : {
				name: Lang.t._("Decoration recycler"),
				role: Lang.t._("You can DRAG decoration items you don't like on this room. Every ::n:: recycled items, you will obtain 1 random decoration element.", {n:GameData.CUSTO_RECYCLING_COST}),
			}

			case R_Bank : {
				name: Lang.t._("Bank"),
				role: Lang.t._("Each time you earn money, the bank augments your earnings by ::n::%. If the bank is Boosted, the bonus is DOUBLED!", { n:GameData.BANK_BONUS }),
			}

			case R_VipCall : {
				name: Lang.t._("Marketing service"),
				role: Lang.t._("You can invoke VIPs in your hotel using this room."),
			}

			case R_Lobby : { name:cast Std.string(r).substr(2), role:cast "TODO" };
		}
		inf.role = addNbsps(inf.role);
		return inf;
	}

	public static function getStockName(rt:RoomType) : LocaleString {
		return switch( rt ) {
			case R_StockBeer : t._("Soda");
			case R_StockPaper : t._("Toilet paper");
			case R_StockSoap : t._("Soap");
			default : cast "#"+rt;
		}
	}


	public static function getQuestObjective(?sid:String, ?id:Data.QObjectiveKind, param:Int, n:Int, shotel:SHotel) : LocaleString {
		if( id==null )
			id = cast sid;
		return addNbsps( switch( id ) {
			case Data.QObjectiveKind.InstallClient: t._("Install clients in bedrooms");
			case Data.QObjectiveKind.MaxedHappiness : t._("Have ::c:: clients with ::n::+ happiness", {c:n, n:shotel.getMaxHappiness()});
			case Data.QObjectiveKind.Love : t._("Give love to your clients");
			case Data.QObjectiveKind.Theft : t._("Steal money to your clients");
			case Data.QObjectiveKind.Bedroom : t._("Have ::n:: bedrooms in your hotel", {n:n});
			case Data.QObjectiveKind.Laundry : t._("Wash client clothes");
			case Data.QObjectiveKind.Beer : t._("Serve Soda to your clients");
			case Data.QObjectiveKind.Soap : t._("Use soap");
			case Data.QObjectiveKind.Paper : t._("Use toilet paper");
			case Data.QObjectiveKind.Boost : t._("Use turbo boost");
			case Data.QObjectiveKind.Trash : t._("Send clients to the Trash");
			case Data.QObjectiveKind.UseItem : t._("Use ::item:: on installed clients", { item: getItem( Type.createEnumIndex(Item, param) ).name });
			case Data.QObjectiveKind.MinHappiness : t._("Have ::n:: clients with AT LEAST ::h:: happiness at the same time in your hotel", {n:n, h:param});
			case Data.QObjectiveKind.ExactHappiness : t._("Have ::n:: clients with EXACTLY ::h:: happiness at the same time in your hotel", {n:n, h:param});
			case Data.QObjectiveKind.CompleteDailyQuestBugged : cast "???";
			case Data.QObjectiveKind.HappinessCombo : t._("Make ::n:: clients happy in one move", {n:n});
			case Data.QObjectiveKind.HappinessLine : t._("Have ::n:: clients with exactly ::h:: happiness in a single row", {n:n, h:param});
			case Data.QObjectiveKind.HappinessColumn : t._("Have ::n:: clients with exactly ::h:: happiness in a single column", {n:n, h:param});
			case Data.QObjectiveKind.Vip : t._("Completely satisfy ::n:: VIP", {n:n});
		} );
	}

	public static function getQuestProgress(?sid:String, ?id:Data.QObjectiveKind, param:Int, remain:Int, shotel:SHotel) : LocaleString {
		if( id==null )
			id = cast sid;
		var s = switch( id ) {
			case Data.QObjectiveKind.InstallClient: t._("Client installed");
			case Data.QObjectiveKind.MaxedHappiness : t._("Client with ::n:: happiness",{n:shotel.getMaxHappiness()});
			case Data.QObjectiveKind.Love : t._("Love given");
			case Data.QObjectiveKind.Theft : t._("Money stolen");
			case Data.QObjectiveKind.Laundry : t._("Clothes washed");
			case Data.QObjectiveKind.Beer : t._("Soda served");
			case Data.QObjectiveKind.Soap : t._("Soap used");
			case Data.QObjectiveKind.Paper : t._("Toilet paper used");
			case Data.QObjectiveKind.Trash : t._("Client sent to the trash");
			case Data.QObjectiveKind.Boost : t._("Boost used");
			case Data.QObjectiveKind.Vip : t._("VIP satisfied");
			case Data.QObjectiveKind.UseItem : t._("::item:: used", { item: getItem( Type.createEnumIndex(Item, param) ).name });
			case Data.QObjectiveKind.ExactHappiness, Data.QObjectiveKind.HappinessCombo, Data.QObjectiveKind.Bedroom, Data.QObjectiveKind.MinHappiness,
				Data.QObjectiveKind.HappinessLine, Data.QObjectiveKind.HappinessColumn :
				cast "???";
			case Data.QObjectiveKind.CompleteDailyQuestBugged : cast "???";
		}
		return cast s + " " + Lang.t._("(::n:: remaining)", {n:remain});
	}


	public static function getQuestReward(e:Data.QRewardKind, n:Int) : LocaleString	 {
		n = mt.MLib.max(1,n);
		return switch( e ) {
			case Data.QRewardKind.LunchBoxAll, Data.QRewardKind.LunchBoxCusto :
				n==1 ? t._("1 mysterious box") : t._("::n:: mysterious boxes", {n:n});

			case Data.QRewardKind.Gem :
				n==1 ? t._("1 gem") : t._("::n:: gems", {n:n});

			case Data.QRewardKind.Gold :
				t._("::n:: gold", {n:n});

			case Data.QRewardKind.EnableDailyQuests :
				t._("Unlock daily contracts");
		}
	}


	public static function getSolverError(err:SolverError) : LocaleString {
		return addNbsps( switch( err ) {
			case RoomCannotBeEdited : t._("This room cannot be modified for the moment.");
			case CannotCustomizeThisRoom : t._("This room cannot be customized.");
			case RoomIsLocked : t._("This room is not available.");
			case RoomIsDamaged : t._("You must clean up the room first.");
			case NoLaundryAvailable : t._("No Laundry available.");
			case NeedMoney(n) : t._("You need ::n:: GOLD.", {n:n});
			case NeedLove(n) : t._("You need ::n:: LOVE.", {n:n});
			case NeedGems(n) : t._("You need ::n:: GEMS.", {n:n});
			case NeedStock(rt, n) :
				switch( rt ) {
					case R_StockPaper : t._("You don't have enough TOILET PAPER in stock (you need ::n::)!", {n:n});
					case R_StockSoap : t._("You don't have enough SOAP in stock (you need ::n::)!", {n:n});
					case R_StockBeer : t._("You don't have enough SODA in stock!");
					case R_StockBoost: t._("You don't have any TURBO BOOSTER ready!");
					default : cast "Unknown stock "+rt;
				}
			case AlreadyOccupied : t._("This room is already occupied!");
			case UnknownClient : t._("Sorry, the client left.");
			case Useless : t._("This action is useless :)");
			case ClientMustHaveARoom : t._("Give this client a bedroom first.");
			case RoomMustBeConnected : t._("You must build your room near another one.");
			case HotelConsistencyError : t._("Destroying this room would make another one collapse!");
			case ClientNeedMoney(n) : t._("This client has no saving!");
			case WaitingLineIsFull : t._("The waiting line is full.");
			case CannotUseGemNow : t._("Too late to use a gem!");
			case ClientDoesntLike(a) : t._("This client doesn't like '::affect::'", {affect:Lang.getAffect(a)});
			case CannotBuildHere : t._("You cannot build here.");
			case NoTrashOnInstalledClient : t._("You cannot trash a client from a bedroom.");
			case NoRecyclerOnInstalledClient : t._("You cannot recycle a client from a bedroom.");
			case TooLateToSkip : t._("This client is about to leave, you cannot use a gem now.");
			case PickGiftsFirst : t._("You must pick the gifts in this room first.");
			case CannotUseItemHere : t._("You cannot use this item on this target.");
			case AlreadyUsedItemOnEmitter : t._("This client cannot receive any extra item.");
			case CannotRecycleThisClient : t._("You cannot recycle this client.");
			//case NeedEmptySpaceLeft : t._("You need an empty space on the left to extend this room.");
			//case NeedEmptySpaceRight : t._("You need an empty space on the right to extend this room.");
			case NeedEmptySpaceLeft, NeedEmptySpaceRight : cast "???";
			case RoomMustBeEmpty : t._("The room must have no client inside.");
			case ValidateClientFirst : t._("You must checkout the client in this room first.");
			case AlreadyHaveInspector : t._("You already have an INSPECTOR in your hotel. You should take care of him first!");
			case CannotDestroyStockIfNotFull : t._("You cannot sell this storage room if it's not full.");
			case NotUnderground : t._("You cannot build this underground.");
			case CannotDestroyRoom : Lang.t._("You cannot destroy this room.");
			case RoomMaximumReached : Lang.t._("You reached the maximum quantity for this room type.");
			case EventRefused : Lang.t._("Sorry, it's too late to participate this event!");
			case EventAlreadyDone : Lang.t._("You already participated to this event.");

			case InvalidTimeStamp : cast "Invalid timestamp";
			case TimezoneError : Lang.t._("Timezone error. Please make sure your device TIME is correct.");
			case UnknownTarget : cast "Action target not found.";
			case IllegalTarget : Lang.t._("You cannot do that on this target.");
			case IllegalAction, InternalGameCommand, NeedItem(_) :
				cast "Illegal action";
		} );
	}

	public static function getRarity(r:Data.RarityKind) : LocaleString {
		return switch( r ) {
			case Data.RarityKind.Common : Lang.t._("Common");
			case Data.RarityKind.Uncommon : Lang.t._("Rare");
			case Data.RarityKind.Rare : Lang.t._("Very rare");
			case Data.RarityKind.Never : Lang.t._("Specials");
		}
	}

	public static function getEvent(id:Data.EventKind) : { title:LocaleString, desc:LocaleString } {
		return switch( id ) {
			case Data.EventKind.ChristmasDay : {
				title	: Lang.t._("Merry Christmas!"),
				desc	: Lang.t._("We added 1 gem in EACH bedroom of your hotel! Merry Christmas!!"),
			}

			case Data.EventKind.ChristmasPeriod : {
				title	: Lang.t._("Getting ready for Christmas!"),
				desc	: Lang.t._("New special clients will come to your hotel from time to time... Make them happy and you will earn UNIQUE Christmas rewards!\nOh and we also added gold in every bedrooms :)"),
			}

			case Data.EventKind.NewYear : {
				title	: Lang.t._("Happy new year!"),
				desc	: Lang.t._("The Consortium wish you a happy new year! They delivered a few gems directly to your Lobby."),
			}

			case Data.EventKind.Autumn : {
				title	: Lang.t._("Autumn is coming!"),
				desc	: Lang.t._("Leaves are falling, time is passing by... To celebrate the new season, we added some gold to every bedrooms :)"),
			}

			//case Data.EventKind.Halloween : {
				//title	: Lang.t._("It's Halloween!"),
				//desc	: Lang.t._("New special clients will come to your hotel from time to time... Make them happy and you will win UNIQUE Halloween rewards!"),
			//}

			//case Data.EventKind.Test : {
				//title	: Lang.untranslated("This is a test event"),
				//desc	: Lang.untranslated("Test event description: maecenas nec ex eu diam elementum semper. Nulla a felis erat. Maecenas nec ligula urna? Quisque neque justo, tincidunt vitae nullam sodales."),
			//}
		}
	}


	public static function getPremium(?eid:Data.PremiumKind, ?idStr:String) : { name:LocaleString, desc:LocaleString } {
		if( eid==null )
			eid = Data.Premium.resolve(idStr).id;

		return switch( eid ) {
			case Data.PremiumKind.Bank1 : {
				name: t._("Bank"),
				desc: t._("::n::% bonus on EVERY money gain from any source! This bonus can be doubled if you use a Turbo Booster.", {n:GameData.BANK_BONUS}),
			}
			case Data.PremiumKind.CustoRecycler : {
				name: t._("Decoration recycler"),
				desc: t._("You can use this special room to recycle decorations you don't like!"),
			}
			case Data.PremiumKind.VipRoom1 : {
				name: t._("Marketing service"),
				desc: t._("You can invoke VIPs in your hotel for free using a new special room!"),
			}
			case Data.PremiumKind.Booster1 : {
				name: t._("Double Turbo Booster"),
				desc: t._("Your turbo generator room will now contain 2 boosters instead of 1!"),
			}
			case Data.PremiumKind.Booster2 : {
				name: t._("Triple Turbo Booster"),
				desc: t._("Your turbo generator room will now contain 3 boosters instead of 2!"),
			}
			case Data.PremiumKind.Booster3 : {
				name: t._("Turbo Booster 4.0"),
				desc: t._("Your turbo generator room will now contain 4 boosters instead of 3!"),
			}
			case Data.PremiumKind.LobbyQueue1 : {
				name: t._("Lobby queue 1"),
				desc: t._("Increase the length of the client queue in your Lobby: more clients means more visibility and more strategy!"),
			}
			case Data.PremiumKind.LobbyQueue2 : {
				name: t._("Lobby queue 2"),
				desc: t._("Increase the length of the client queue in your Lobby: more clients means more visibility and more strategy!"),
			}
			case Data.PremiumKind.LobbyQueue3 : {
				name: t._("Lobby queue 3"),
				desc: t._("Increase the length of the client queue in your Lobby: more clients means more visibility and more strategy!"),
			}
			case Data.PremiumKind.LobbyQueue4 : {
				name: t._("Lobby queue 4"),
				desc: t._("Increase the length of the client queue in your Lobby: more clients means more visibility and more strategy!"),
			}
			case Data.PremiumKind.LobbyQueue5 : {
				name: t._("Lobby queue 5"),
				desc: t._("Increase the length of the client queue in your Lobby: more clients means more visibility and more strategy!"),
			}
			case Data.PremiumKind.LobbyQueue6 : {
				name: t._("Lobby queue 6"),
				desc: t._("Increase the length of the client queue in your Lobby: more clients means more visibility and more strategy!"),
			}
			case Data.PremiumKind.LobbyQueue7 : {
				name: t._("Lobby queue 7"),
				desc: t._("Increase the length of the client queue in your Lobby: more clients means more visibility and more strategy!"),
			}
			case Data.PremiumKind.GetLove1 : {
				name: t._("Love catcher 1"),
				desc: t._("You get +::n:: bonus Love when you visit any friend hotel!", { n:GameData.VISIT_LOVE_1 }),
			}
			case Data.PremiumKind.GetLove2 : {
				name: t._("Love catcher 2"),
				desc: t._("You get +::n:: bonus Love when you visit any friend hotel!", { n:GameData.VISIT_LOVE_2 }),
			}
			case Data.PremiumKind.MaxLove1 : {
				name: t._("Love stock 1"),
				desc: t._("Increase your maximum Love stock up to ::n:: (instead of ::p::).", { n:GameData.MAX_LOVE_1, p:GameData.MAX_LOVE_0 }),
			}
			case Data.PremiumKind.MaxLove2 : {
				name: t._("Love stock 2"),
				desc: t._("Increase your maximum Love stock up to ::n:: (instead of ::p::).", { n:GameData.MAX_LOVE_2, p:GameData.MAX_LOVE_1 }),
			}
			case Data.PremiumKind.PowerOfLove1 : {
				name: t._("Power of Love 1"),
				desc: t._("Each time you use Love on a client, he gets +::n:: happiness (instead of +::p::)!", { n:GameData.LOVE_POWER_BASE+1, p:GameData.LOVE_POWER_BASE }),
			}
			case Data.PremiumKind.PowerOfLove2 : {
				name: t._("Power of Love 2"),
				desc: t._("Each time you use Love on a client, he gets +::n:: happiness (instead of +::p::)!", { n:GameData.LOVE_POWER_BASE+2, p:GameData.LOVE_POWER_BASE+1 }),
			}
			case Data.PremiumKind.PowerOfLove3 : {
				name: t._("Power of Love 3"),
				desc: t._("Each time you use Love on a client, he gets +::n:: happiness (instead of +::p::)!", { n:GameData.LOVE_POWER_BASE+3, p:GameData.LOVE_POWER_BASE+2 }),
			}
			//default : {
				//name : Lang.untranslated("TODO "+eid),
				//desc : Lang.untranslated("TODO desc "+eid),
			//}
		}
	}
}
