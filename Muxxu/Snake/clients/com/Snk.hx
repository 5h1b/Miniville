import Protocole;
class Snk implements haxe.Public
{//}
	

	static var COS = [ 1000,999,999,999,999,998,998,997,996,995,995,993,992,991,990,988,987,985,983,982,980,978,975,973,971,968,966,963,961,958,955,952,949,946,942,939,935,932,928,924,921,917,913,908,904,900,896,891,886,882,877,872,867,862,857,852,847,841,836,830,825,819,813,808,802,796,789,783,777,771,764,758,751,745,738,731,724,717,710,703,696,689,682,674,667,659,652,644,637,629,621,613,605,597,589,581,573,565,557,548,540,531,523,514,506,497,488,480,471,462,453,444,435,426,417,408,399,390,380,371,362,353,343,334,324,315,305,296,286,277,267,257,248,238,228,219,209,199,189,179,169,160,150,140,130,120,110,100,90,80,70,60,50,40,30,20,10,0,-9,-19,-29,-39,-49,-59,-69,-79,-89,-99,-108,-118,-128,-138,-148,-158,-168,-178,-188,-197,-207,-217,-227,-236,-246,-256,-265,-275,-285,-294,-304,-313,-323,-332,-342,-351,-360,-370,-379,-388,-397,-407,-416,-425,-434,-443,-452,-461,-469,-478,-487,-496,-504,-513,-522,-530,-538,-547,-555,-563,-572,-580,-588,-596,-604,-612,-620,-628,-635,-643,-651,-658,-666,-673,-681,-688,-695,-702,-709,-716,-723,-730,-737,-744,-750,-757,-763,-770,-776,-782,-789,-795,-801,-807,-812,-818,-824,-830,-835,-841,-846,-851,-856,-862,-867,-871,-876,-881,-886,-890,-895,-899,-904,-908,-912,-916,-920,-924,-928,-931,-935,-938,-942,-945,-948,-951,-954,-957,-960,-963,-965,-968,-970,-973,-975,-977,-979,-981,-983,-985,-986,-988,-989,-991,-992,-993,-994,-995,-996,-997,-998,-998,-999,-999,-999,-999,-999,-999,-999,-999,-999,-998,-998,-997,-996,-996,-995,-994,-992,-991,-990,-989,-987,-985,-984,-982,-980,-978,-976,-974,-971,-969,-966,-964,-961,-958,-955,-952,-949,-946,-943,-939,-936,-932,-929,-925,-921,-917,-913,-909,-905,-901,-896,-892,-887,-883,-878,-873,-868,-863,-858,-853,-848,-842,-837,-831,-826,-820,-814,-808,-803,-797,-790,-784,-778,-772,-765,-759,-752,-746,-739,-732,-725,-719,-712,-704,-697,-690,-683,-676,-668,-661,-653,-646,-638,-630,-622,-615,-607,-599,-591,-582,-574,-566,-558,-550,-541,-533,-524,-516,-507,-498,-490,-481,-472,-463,-455,-446,-437,-428,-419,-409,-400,-391,-382,-373,-363,-354,-345,-335,-326,-316,-307,-297,-288,-278,-269,-259,-249,-240,-230,-220,-210,-201,-191,-181,-171,-161,-151,-141,-132,-122,-112,-102,-92,-82,-72,-62,-52,-42,-32,-22,-12,-2,7,17,27,37,47,57,67,77,87,97,107,117,127,137,147,156,166,176,186,196,206,215,225,235,245,254,264,274,283,293,302,312,321,331,340,350,359,368,377,387,396,405,414,423,432,441,450,459,468,477,486,494,503,512,520,529,537,546,554,562,570,579,587,595,603,611,619,626,634,642,650,657,665,672,679,687,694,701,708,715,722,729,736,743,749,756,762,769,775,781,788,794,800,806,812,817,823,829,834,840,845,850,856,861,866,871,876,880,885,890,894,899,903,907,911,915,919,923,927,931,934,938,941,945,948,951,954,957,960,962,965,968,970,972,975,977,979,981,983,985,986,988,989,991,992,993,994,995,996,997,998,998,999,999,999,999 ];

	static function getField(color=0xFFFFFF,size=10,align=0,font="04b03") {
		var field = new flash.text.TextField();
		field.selectable = true;
		field.embedFonts = true;
		field.selectable = false;
		//field.gridFitType = flash.text.GridFitType.PIXEL;
		//field.antiAliasType = flash.text.AntiAliasType.NORMAL;
		var tf = field.getTextFormat();
		tf.color = color;
		tf.font = font;
		tf.size = size;
		tf.align = [flash.text.TextFormatAlign.LEFT, flash.text.TextFormatAlign.CENTER, flash.text.TextFormatAlign.RIGHT][align + 1];
		field.defaultTextFormat = tf;
		return field;
		
		//flash.text.TextRenderer.setAdvancedAntiAliasingTable("04b03",flash.text.FontStyle.REGULAR,flash.text.TextColorType.LIGHT_COLOR,
		
	}
	
	static function getEnum<T>(en:Enum<T>,n:Int):T {
			return Type.createEnum(en, Type.getEnumConstructs(en)[n] );
	}
	
	static function formatTime(time:Float) {
	
		var sec = Std.string(Std.int(time/1000)%60);
		var min = Std.string(Std.int(time / 60000));
		while(sec.length < 2) sec = "0" + sec;
		while(min.length < 2) min = "0" + min;
		
		return min + ":" + sec;
	}
	
	static function getMousePos(mc:flash.display.DisplayObject) {

		var xm:Float = 0;
		var ym:Float = 0;
		
		while( mc != null ) {
			xm += mc.x;
			ym += mc.y;
			mc = mc.parent;
		}
		
		var root = flash.Lib.current;
		xm = -(xm - root.mouseX*0.5);
		ym = -(ym - root.mouseY*0.5);
		
		return { x:xm, y:ym };
	}
	
	static function cos(n:Float) {
		var k = Math.round(n * 100);
		while( k >= 628 ) 	k -= 628;
		while( k < 0 ) 		k += 628;
		return COS[k] * 0.001;
		return Math.cos(n);
	}
	static function sin(n:Float) {
		return cos(1.57 - n);
	}
	
	
//{
}

